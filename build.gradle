plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.flywaydb.flyway' version '9.22.3'
	id 'com.diffplug.spotless' version '6.25.0'
	id "org.sonarqube" version "6.2.0.5505"
	id 'jacoco' // Plugin para cobertura de código
	id 'com.google.protobuf' version '0.9.4'
}

group = 'com.ags'
version = '0.0.1-SNAPSHOT'

ext {
	set('springGrpcVersion', "0.9.0")
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-database-postgresql'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	//Validations
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// JWT dependencies
	implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'

	//Swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'

	// Grpc
	implementation 'org.springframework.grpc:spring-grpc-spring-boot-starter'
	testImplementation 'org.springframework.grpc:spring-grpc-test'

	// ModelMapper
	implementation 'org.modelmapper:modelmapper:3.2.0'

	// Kafka
	implementation 'org.springframework.kafka:spring-kafka'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.grpc:spring-grpc-dependencies:${springGrpcVersion}"
	}
}

// Configuração do Flyway
flyway {
	url = 'jdbc:postgresql://localhost:5432/ecommerce'
	user = 'ecommerce'
	password = 'ecommerce'
}

// Configuração do Spotless
spotless {
	java {
		googleJavaFormat()
		removeUnusedImports()
		trimTrailingWhitespace()
		endWithNewline()
	}

	format 'sql', {
		target 'src/**/*.sql'
		trimTrailingWhitespace()
		endWithNewline()
	}
}

// Configuração do Protobuf
protobuf {
	protoc {
		artifact = 'com.google.protobuf:protoc'
	}
	plugins {
		grpc {
			artifact = 'io.grpc:protoc-gen-grpc-java'
		}
	}
	generateProtoTasks {
		all()*.plugins {
			grpc {
				option '@generated=omit'
			}
		}
	}
}

// Configuração do JaCoCo
jacoco {
	toolVersion = "0.8.11"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                '**/dto/**',
                '**/entity/**',
                '**/exception/**',
                '**/config/**'
            ])
        }))
    }
    finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.20 // 80% de cobertura mínima
			}
		}
	}
}

// Configuração do SonarQube
sonar {
	properties {
		property "sonar.projectKey", "arthurgsantana_spring-ecommerce-service"
		property "sonar.organization", "arthurgsantana"
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
		property "sonar.junit.reportPaths", "build/test-results/test"
		property "sonar.java.source", "21"
		property "sonar.exclusions", "**/dto/**, **/entity/**, **/exception/**, **/config/**"
	}
}

test {
	useJUnitPlatform()
	systemProperty 'mockito.mock-maker', 'inline'
	finalizedBy jacocoTestReport
}

tasks.named('test') {
	useJUnitPlatform()
}
